<?php

declare(strict_types=1);

namespace ItalyStrap\Empress;

use Brick\VarExporter\ExportException;
use Brick\VarExporter\VarExporter;
use ItalyStrap\Config\ConfigInterface;
use Safe\DateTimeImmutable;
use Webimpress\SafeWriter\Exception\ExceptionInterface as FileWriterException;
use Webimpress\SafeWriter\FileWriter;

class ProvidersCache implements ProvidersCacheInterface
{
    private const CACHE_TEMPLATE = <<<'EOT'
<?php

declare(strict_types=1);

/**
 * This file generated by %s at %s
 */

%s
EOT;
    private ?string $file;

    public function __construct(?string $file = null)
    {
        $this->file = $file;
    }

    public function read(
        ConfigInterface $config
    ): bool {

        $cachedConfigFile = (string)$config->get(static::CACHE_PATH, $this->file);

        if (
            !$cachedConfigFile
            || !file_exists($cachedConfigFile)
        ) {
            return false;
        }

        $config->merge((array)require $cachedConfigFile);
        return true;
    }

    public function write(
        ConfigInterface $config
    ): void {
        $cachedConfigFile = (string)$config->get(static::CACHE_PATH, $this->file);

        if (!$cachedConfigFile) {
            return;
        }

        try {
            $contents = sprintf(
                static::CACHE_TEMPLATE,
                static::class,
                // Write an alternative to date('c')
                (new DateTimeImmutable('now'))->format('c'),
                VarExporter::export(
                    $config->toArray(),
                    VarExporter::ADD_RETURN | VarExporter::CLOSURE_SNAPSHOT_USES
                )
            );
        } catch (ExportException $e) {
            throw new \ErrorException('Configuration cannot be cached', 0, 1, __FILE__, __LINE__, $e);
        }

        $this->writeCache($cachedConfigFile, $contents, (int)$config->get(self::CACHE_FILEMODE, 0666));

        return;
    }

    private function writeCache(string $cachedConfigFile, string $contents, int $mode): void
    {
        try {
            FileWriter::writeFile($cachedConfigFile, $contents, $mode);
        } catch (FileWriterException $e) {
            // ignore errors writing cache file
        }
    }
}
