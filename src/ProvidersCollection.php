<?php

declare(strict_types=1);

namespace ItalyStrap\Empress;

use Auryn\InjectionException;
use Brick\VarExporter\ExportException;
use Brick\VarExporter\VarExporter;
use ItalyStrap\Config\ConfigInterface;
use Webimpress\SafeWriter\Exception\ExceptionInterface as FileWriterException;
use Webimpress\SafeWriter\FileWriter;

/**
 * @psalm-api
 */
class ProvidersCollection
{
    private ConfigInterface $config;
    private Injector $injector;

    /**
     * @param Injector $injector
     * @param ConfigInterface $config
     * @param iterable<class-string|callable> $providers
     * @param string|null $cachedConfigFile
     * @throws \ErrorException
     */
    public function __construct(
        Injector $injector,
        ConfigInterface $config,
        iterable $providers = [],
        ?string $cachedConfigFile = null
    ) {
        $this->injector = $injector;
        $this->config = $config;

        $collection = $this->loadCollectionFromProviders($providers);
        $this->config->merge(...$collection);
        $this->cacheConfig($this->config, $cachedConfigFile);
    }

    /**
     * @return ConfigInterface
     */
    public function collection(): ConfigInterface
    {
        return $this->config;
    }

    /**
     * @param iterable<class-string|callable> $providers
     * @return array<array-key, mixed>
     * @throws \ErrorException
     */
    private function loadCollectionFromProviders(iterable $providers): array
    {
        $collection = [];
        foreach ($providers as $provider) {
            try {
                $result = $this->injector->execute($provider);
            } catch (InjectionException $e) {
                throw new \ErrorException(
                    \sprintf(
                        'An error occurred when executing %s: %s',
                        is_object($provider) ? get_class($provider) : gettype($provider),
                        $e->getMessage()
                    ),
                    0,
                    1,
                    __FILE__,
                    __LINE__,
                    $e
                );
            } catch (\Throwable $e) {
                throw new \ErrorException(
                    \sprintf(
                        'An error occurred when executing %s: %s',
                        is_object($provider) ? get_class($provider) : gettype($provider),
                        $e->getMessage()
                    ),
                    0,
                    1,
                    __FILE__,
                    __LINE__,
                    $e
                );
            }

            if ($result instanceof \Generator) {
                foreach ($result as $item) {
                    $collection[] = (array)$item;
                }
                continue;
            }

            $collection[] = (array)$result;
        }

        return $collection;
    }

    private function cacheConfig(ConfigInterface $config, ?string $cachedConfigFile): void
    {
        if (null === $cachedConfigFile) {
            return;
        }

//        if (empty($config[static::ENABLE_CACHE])) {
//            return;
//        }

        try {
            $contents = sprintf(
                <<<'EOT'
<?php

declare(strict_types=1);

/**
 * This file generated by %s at %s
 */

%s
EOT
                ,
                static::class,
                date('c'),
                VarExporter::export(
                    $config->toArray(),
                    VarExporter::ADD_RETURN | VarExporter::CLOSURE_SNAPSHOT_USES
                )
            );
        } catch (ExportException $e) {
            throw new \ErrorException('Configuration cannot be cached', 0, 1, __FILE__, __LINE__, $e);
        }

//        $mode = $config[self::CACHE_FILEMODE] ?? null;
        $this->writeCache($cachedConfigFile, $contents, null);
    }

    private function writeCache(string $cachedConfigFile, ?string $contents, ?int $mode): void
    {
        try {
            if ($mode !== null) {
                FileWriter::writeFile($cachedConfigFile, $contents, $mode);
            } else {
                FileWriter::writeFile($cachedConfigFile, $contents);
            }
        } catch (FileWriterException $e) {
            // ignore errors writing cache file
        }
    }
}
